const assert = require('assert')
const webpack = require('webpack')
const autoprefixer = require('autoprefixer')
const ExtractTextPlugin = require('extract-text-webpack-plugin')

module.exports = function buildWebpackConfig (options) {
  assert(options, 'buildWebpackConfig requires options')

  // Environment type
  const BUILD = !!options.BUILD
  const TEST = !!options.TEST

  // Base configuration
  const config = {
    entry: TEST ? {} : {
      app: './source/index.js'
    },

    output: TEST ? {} : {
      path: 'dist',
      filename: 'virtualized.js'
    },

    target: 'web',

    devtool: BUILD ? 'source-map' : (TEST ? 'inline-source-map' : 'eval-source-map'),

    externals: [],

    // See https://github.com/request/request/issues/1691
    // See https://github.com/webpack/jade-loader/issues/8
    node: {
      fs: 'empty'
    },

    module: {
      loaders: [{
        test: /\.json$/,
        loader: 'json'
      }, {
        test: /\.(js|jsx)$/,
        loader: 'babel',
        query: {
          plugins: BUILD
            ? []
            : (TEST
              ? ['typecheck']
              : ['typecheck', 'react-transform']),
          extra: {
            'react-transform': {
              transforms: [{
                transform: 'react-transform-hmr',
                imports: ['react'],
                locals: ['module']
              }, {
                transform: 'react-transform-catch-errors',
                imports: ['react']
              }]
            }
          }
        },
        exclude: /node_modules/
      }, {
        test: /\.css$/,
        loader: TEST ? 'null' : ExtractTextPlugin.extract(
          'style',
          'css?sourceMap!postcss'
        )
      }, {
        test: /\.less$/,
        loader: TEST ? 'null' : ExtractTextPlugin.extract(
          'style',
          'css?sourceMap!postcss!less?sourceMap'
        )
      }, {
        test: /\.(png|jpg|jpeg|gif|svg|woff|woff2|ico)$/,
        loader: 'file'
      }]
    },

    // PostCSS
    postcss: [
      autoprefixer({ browsers: ['last 2 versions'] })
    ],

    resolve: {
      extensions: ['', '.js', '.jsx', '.json', '.less']
    },

    plugins: [
      new ExtractTextPlugin('virtualized.css', {
        disable: !BUILD || TEST
      })
    ],

    devServer: {
      port: 9020,
      stats: {
        modules: false,
        cached: false,
        colors: true,
        chunk: false
      }
    }
  }

  // Minify, dedupe
  if (BUILD) {
    config.plugins.push(
      new webpack.NoErrorsPlugin(),
      new webpack.optimize.DedupePlugin(),
      new webpack.optimize.UglifyJsPlugin()
    )
  }

  return config
}
