import React, { Component } from 'react'
import { findDOMNode } from 'react-dom'
import detectResize from '@vendor/detect-element-resize'
import { getWindowWidth, getWindowHeight, getPadding } from '@source/utils/browser'
import Table from './Table'
import './Table.less'

/**
 * Wraps a Table component and auto-manages its width, height, and padding properties.
 * This component grows to fill all available height and width in its page, given an initial left and top offset.
 */
export default class AutoSizingTable extends Component {
  constructor (props, context) {
    super(props, context)

    this.state = {
      height: 0,
      width: 0
    }

    this._onResize = this._onResize.bind(this)
  }

  /** Auto-scroll the table to ensure the specified index is visible. */
  scrollToRow (index) {
    this.refs.Table.scrollToRow(index)
  }

  componentDidMount () {
    this._table = findDOMNode(this.refs.Table)
    this._tableParentNode = this._table.parentNode
    this._tableFirstChild = this._table.firstChild

    detectResize.addResizeListener(this._tableParentNode, this._onResize)
  }

  componentWillUnmount () {
    detectResize.removeResizeListener(this._tableParentNode, this._onResize)
  }

  render () {
    const { height, horizontalPadding, verticalPadding, width } = this.state

    return (
      <Table
        ref='Table'
        width={width}
        height={height}
        horizontalPadding={horizontalPadding}
        verticalPadding={verticalPadding}
        {...this.props}/>
    )
  }

  _getAbsoluteOffset (element) {
    var left = 0
    var top = 0

    while (element) {
      top += element.offsetTop || 0
      left += element.offsetLeft || 0
      element = element.offsetParent
    }

    return { left, top }
  }

  _onResize () {
    const {
      paddingTop,
      paddingRight,
      paddingBottom,
      paddingLeft
    } = getPadding(this._table)
    const horizontalPadding = paddingRight + paddingLeft
    const verticalPadding = paddingTop + paddingBottom

    const borderWidth = this._tableFirstChild.offsetWidth - this._tableFirstChild.clientWidth
    const borderHeight = this._tableFirstChild.offsetHeight - this._tableFirstChild.clientHeight

    const viewportWidth = getWindowWidth()
    const viewportHeight = getWindowHeight()

    const offset = this._getAbsoluteOffset(this._table)
    const offsetLeft = offset.left
    const offsetTop = offset.top

    const width = viewportWidth - borderWidth - offsetLeft
    const height = viewportHeight - borderHeight - offsetTop

    if (
      height !== this.state.height ||
      horizontalPadding !== this.state.horizontalPadding ||
      verticalPadding !== this.state.verticalPadding ||
      width !== this.state.width
    ) {
      this.setState({
        height,
        horizontalPadding,
        verticalPadding,
        width
      })
    }
  }
}
